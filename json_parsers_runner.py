#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å–µ—Ö JSON –ø–∞—Ä—Å–µ—Ä–æ–≤
–ê–≤—Ç–æ—Ä: OrionFLASH
–û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö JSON –ø–∞—Ä—Å–µ—Ä–æ–≤ –∏–ª–∏ –≤—Å–µ—Ö —Å—Ä–∞–∑—É.
         –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π, —Ç–∞–∫ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
         —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å JSONToExcelProcessor.
"""

import os
import sys
import importlib.util
from json_to_excel_base import JSONToExcelProcessor, create_processor_config

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–ê–†–°–ï–†–û–í
# =============================================================================

# –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
# –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ, –≤—Ö–æ–¥–Ω–æ–º –∏ –≤—ã—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–∞—Ö
PARSER_CONFIGS = {
    "leaders_for_admin": {
        "module": "json_parser_leaders_for_admin",  # –ò–º—è –º–æ–¥—É–ª—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        "input_file": "leaders_for_admin_response.json",  # –ò–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞
        "output_file": "leaders_for_admin_data.xlsx"  # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞
    },
    "reward": {
        "module": "json_parser_reward", 
        "input_file": "reward_response.json",
        "output_file": "reward_data.xlsx"
    },
    "profile": {
        "module": "json_parser_profile",
        "input_file": "profile_response.json", 
        "output_file": "profile_data.xlsx"
    },
    "news_details": {
        "module": "json_parser_news_details",
        "input_file": "news_details_response.json",
        "output_file": "news_details_data.xlsx"
    },
    "address_book_tn": {
        "module": "json_parser_address_book_tn",
        "input_file": "address_book_tn_response.json",
        "output_file": "address_book_tn_data.xlsx"
    },
    "address_book_dev": {
        "module": "json_parser_address_book_dev",
        "input_file": "address_book_dev_response.json",
        "output_file": "address_book_dev_data.xlsx"
    },
    "orders": {
        "module": "json_parser_orders",
        "input_file": "orders_response.json",
        "output_file": "orders_data.xlsx"
    },
    "news_list": {
        "module": "json_parser_news_list",
        "input_file": "news_list_response.json",
        "output_file": "news_list_data.xlsx"
    },
    "rating_list": {
        "module": "json_parser_rating_list",
        "input_file": "rating_list_response.json",
        "output_file": "rating_list_data.xlsx"
    }
}

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê –ü–ê–†–°–ï–†–û–í
# =============================================================================

def run_single_parser(parser_name):
    """
    –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
    
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –µ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–æ–π.
    
    Args:
        parser_name (str): –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑ PARSER_CONFIGS
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if parser_name not in PARSER_CONFIGS:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {parser_name}")
        return False
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
    config = PARSER_CONFIGS[parser_name]
    module_name = config["module"]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –º–æ–¥—É–ª—è
        if os.path.exists(f"{module_name}.py"):
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
            spec = importlib.util.spec_from_file_location(module_name, f"{module_name}.py")
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è
            result = module.main()
            return result
        else:
            print(f"‚ùå –§–∞–π–ª {module_name}.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {parser_name}: {str(e)}")
        return False

def run_universal_parser(parser_name):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç JSONToExcelProcessor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –¥–∞–Ω–Ω—ã—Ö.
    –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.
    
    Args:
        parser_name (str): –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑ PARSER_CONFIGS
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if parser_name not in PARSER_CONFIGS:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {parser_name}")
        return False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    # –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è INPUT –∏ OUTPUT –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    input_dir = r"/Users/orionflash/Desktop/MyProject/Gen_Load_Game_Script/INPUT"
    output_dir = r"/Users/orionflash/Desktop/MyProject/Gen_Load_Game_Script/OUTPUT"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
    parser_config = PARSER_CONFIGS[parser_name]
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
    input_file = os.path.join(input_dir, parser_config["input_file"])
    output_file = os.path.join(output_dir, parser_config["output_file"])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –∏–º–µ–Ω–µ–º –ø–∞—Ä—Å–µ—Ä–∞ –∏ —É—Ä–æ–≤–Ω–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è DEBUG
    processor = JSONToExcelProcessor(parser_name, "DEBUG")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    field_configs = create_processor_config()
    if parser_name in field_configs:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        config = field_configs[parser_name]
    else:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        config = {"sheet_name": "Data", "include_fields": None, "exclude_fields": None}
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
    success = processor.process(
        input_file=input_file,
        output_file=output_file,
        include_fields=config.get("include_fields"),
        exclude_fields=config.get("exclude_fields"),
        sheet_name=config.get("sheet_name", "Data")
    )
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if success:
        print(f"‚úÖ {parser_name}: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        print(f"‚ùå {parser_name}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    
    return success

def run_all_parsers():
    """
    –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –∏–∑ PARSER_CONFIGS –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö JSON –ø–∞—Ä—Å–µ—Ä–æ–≤...")
    results = {}
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
    for parser_name in PARSER_CONFIGS.keys():
        print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ {parser_name} ---")
        results[parser_name] = run_universal_parser(parser_name)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*50)
    
    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
    success_count = sum(1 for success in results.values() if success)
    total_count = len(results)
    
    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
    for parser_name, success in results.items():
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
        print(f"{parser_name}: {status}")
    
    # –í—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} –ø–∞—Ä—Å–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    return results

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:
    - –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: python script.py <parser_name>
    - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: python script.py all
    
    –í—ã—Ö–æ–¥–Ω—ã–µ –∫–æ–¥—ã:
    - 0: —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    - 1: –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) < 2:
        # –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  python {sys.argv[0]} <parser_name>  - –∑–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞")
        print(f"  python {sys.argv[0]} all            - –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã:")
        
        # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
        for name in PARSER_CONFIGS.keys():
            print(f"  - {name}")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    command = sys.argv[1].lower()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    if command == "all":
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
        run_all_parsers()
    elif command in PARSER_CONFIGS:
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        success = run_universal_parser(command)
        if not success:
            # –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            sys.exit(1)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    main() 