#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å–µ—Ö JSON –ø–∞—Ä—Å–µ—Ä–æ–≤
"""

import os
import sys
import importlib.util
from json_to_excel_base import JSONToExcelProcessor, create_processor_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PARSER_CONFIGS = {
    "leaders_for_admin": {
        "module": "json_parser_leaders_for_admin",
        "input_file": "leaders_for_admin_response.json",
        "output_file": "leaders_for_admin_data.xlsx"
    },
    "reward": {
        "module": "json_parser_reward", 
        "input_file": "reward_response.json",
        "output_file": "reward_data.xlsx"
    },
    "profile": {
        "module": "json_parser_profile",
        "input_file": "profile_response.json", 
        "output_file": "profile_data.xlsx"
    },
    "news_details": {
        "module": "json_parser_news_details",
        "input_file": "news_details_response.json",
        "output_file": "news_details_data.xlsx"
    },
    "address_book_tn": {
        "module": "json_parser_address_book_tn",
        "input_file": "address_book_tn_response.json",
        "output_file": "address_book_tn_data.xlsx"
    },
    "address_book_dev": {
        "module": "json_parser_address_book_dev",
        "input_file": "address_book_dev_response.json",
        "output_file": "address_book_dev_data.xlsx"
    },
    "orders": {
        "module": "json_parser_orders",
        "input_file": "orders_response.json",
        "output_file": "orders_data.xlsx"
    },
    "news_list": {
        "module": "json_parser_news_list",
        "input_file": "news_list_response.json",
        "output_file": "news_list_data.xlsx"
    },
    "rating_list": {
        "module": "json_parser_rating_list",
        "input_file": "rating_list_response.json",
        "output_file": "rating_list_data.xlsx"
    }
}

def run_single_parser(parser_name):
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    if parser_name not in PARSER_CONFIGS:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {parser_name}")
        return False
    
    config = PARSER_CONFIGS[parser_name]
    module_name = config["module"]
    
    try:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
        if os.path.exists(f"{module_name}.py"):
            spec = importlib.util.spec_from_file_location(module_name, f"{module_name}.py")
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            result = module.main()
            return result
        else:
            print(f"‚ùå –§–∞–π–ª {module_name}.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {parser_name}: {str(e)}")
        return False

def run_universal_parser(parser_name):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å"""
    if parser_name not in PARSER_CONFIGS:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {parser_name}")
        return False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
    input_dir = r"/Users/orionflash/Desktop/MyProject/Gen_Load_Game_Script/INPUT"
    output_dir = r"/Users/orionflash/Desktop/MyProject/Gen_Load_Game_Script/OUTPUT"
    
    parser_config = PARSER_CONFIGS[parser_name]
    input_file = os.path.join(input_dir, parser_config["input_file"])
    output_file = os.path.join(output_dir, parser_config["output_file"])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    processor = JSONToExcelProcessor(parser_name, "DEBUG")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π
    field_configs = create_processor_config()
    if parser_name in field_configs:
        config = field_configs[parser_name]
    else:
        config = {"sheet_name": "Data", "include_fields": None, "exclude_fields": None}
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    success = processor.process(
        input_file=input_file,
        output_file=output_file,
        include_fields=config.get("include_fields"),
        exclude_fields=config.get("exclude_fields"),
        sheet_name=config.get("sheet_name", "Data")
    )
    
    if success:
        print(f"‚úÖ {parser_name}: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        print(f"‚ùå {parser_name}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    
    return success

def run_all_parsers():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö JSON –ø–∞—Ä—Å–µ—Ä–æ–≤...")
    results = {}
    
    for parser_name in PARSER_CONFIGS.keys():
        print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ {parser_name} ---")
        results[parser_name] = run_universal_parser(parser_name)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*50)
    
    success_count = sum(1 for success in results.values() if success)
    total_count = len(results)
    
    for parser_name, success in results.items():
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞"
        print(f"{parser_name}: {status}")
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} –ø–∞—Ä—Å–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  python {sys.argv[0]} <parser_name>  - –∑–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞")
        print(f"  python {sys.argv[0]} all            - –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã:")
        for name in PARSER_CONFIGS.keys():
            print(f"  - {name}")
        return
    
    command = sys.argv[1].lower()
    
    if command == "all":
        run_all_parsers()
    elif command in PARSER_CONFIGS:
        success = run_universal_parser(command)
        if not success:
            sys.exit(1)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)

if __name__ == "__main__":
    main() 