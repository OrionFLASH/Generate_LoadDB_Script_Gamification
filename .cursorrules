# =============================================================================
# Правила для Cursor IDE - проект Game Script Generator
# Автор: OrionFLASH
# Описание: Настройки и правила для работы с проектом в Cursor IDE
# =============================================================================

# Настройки Python интерпретатора
python.defaultInterpreterPath: "./local_env/bin/python"

# Активация окружения в терминале
python.terminal.activateEnvironment: true

# Автоматическое определение типа файла
files.associations: {
    "*.py": "python"
}

# =============================================================================
# ОСНОВНЫЕ ТРЕБОВАНИЯ К КОДУ
# =============================================================================

# СТИЛЬ КОДА
- Используйте PEP 8 для форматирования Python кода
- Максимальная длина строки: 120 символов
- Отступы: 4 пробела (не табуляция)
- Импорты группировать: стандартная библиотека, сторонние пакеты, локальные модули
- Пустые строки между функциями и классами: 2 строки
- Пустые строки внутри функций: 1 строка

# ПЕРЕМЕННЫЕ И ИМЕНА
- Имена переменных: snake_case (например: user_name, file_path)
- Имена функций: snake_case (например: load_data, convert_to_excel)
- Имена классов: PascalCase (например: DataProcessor, ExcelConverter)
- Константы: UPPER_SNAKE_CASE (например: MAX_RETRY_COUNT, DEFAULT_TIMEOUT)
- Избегайте однобуквенных имен переменных (кроме счетчиков в циклах)
- Используйте описательные имена, отражающие назначение

# ИМЕНОВАНИЕ ФАЙЛОВ
- Python файлы: snake_case (например: data_processor.py, excel_converter.py)
- Тестовые файлы: test_*.py (например: test_data_processing.py)
- Конфигурационные файлы: snake_case (например: config_settings.py)
- Скрипты утилит: snake_case (например: setup_environment.py)
- Основные программы: main.py, app.py, run.py
- Альтернативные версии: main_standard_libs.py, main_alternative.py
- Документация: README.md, CHANGELOG.md, LICENSE.md
- Логи: *.log (например: app_2025-07-28.log)
- Временные файлы: temp_*.py, tmp_*.py
- Архивы: *.bak, *.backup, *.old
- Избегайте пробелов и специальных символов в именах файлов
- Используйте только латинские буквы, цифры, подчеркивания и дефисы
- Максимальная длина имени файла: 50 символов

# АРХИТЕКТУРА ПРОЕКТА
- Весь основной код размещается в одном файле main.py
- Функции группируются по логическим блокам с комментариями
- Используйте разделители для организации кода внутри файла
- Альтернативные версии могут быть в отдельных файлах (scripts/)
- Тестовые функции размещаются в каталоге tests/
- Конфигурационные файлы в каталоге config/

# ДОКУМЕНТАЦИЯ И КОММЕНТАРИИ
- Все функции должны иметь docstring в формате Google Style
- Сложные алгоритмы должны быть прокомментированы
- Комментарии на русском языке для бизнес-логики
- Комментарии на английском для технических деталей
- Используйте type hints для параметров и возвращаемых значений

# ЛОГИРОВАНИЕ
- Используйте модуль logging с иерархическими логгерами
- Используйте функцию log_message для централизованного логирования
- Формат логов: "YYYY-MM-DD HH:MM:SS.mmm - LoggerName - LEVEL - Message"
- Уровни логирования:
  * DEBUG: детальная отладочная информация
  * INFO: общая информация о ходе выполнения
  * WARNING: предупреждения, не критичные ошибки
  * ERROR: ошибки, требующие внимания
  * CRITICAL: критические ошибки, останавливающие работу
- Логировать начало и конец важных операций
- Логировать время выполнения длительных операций
- Логировать количество обработанных элементов
- Использовать структурированное логирование для сложных данных

# ОБРАБОТКА ОШИБОК
- Используйте try-except для обработки исключений
- Логируйте все исключения с полной информацией
- Не подавляйте исключения без логирования
- Используйте пользовательские исключения для бизнес-логики
- Проверяйте входные данные на валидность

# ПРОИЗВОДИТЕЛЬНОСТЬ
- Используйте декораторы @measure_time для измерения времени выполнения
- Оптимизируйте работу с большими файлами (обработка по частям)
- Используйте генераторы для больших наборов данных
- Кэшируйте результаты дорогостоящих операций
- Логируйте время выполнения для мониторинга производительности

# =============================================================================
# ТРЕБОВАНИЯ К README ФАЙЛАМ
# =============================================================================

# СТРУКТУРА README
- Заголовок с названием проекта
- Краткое описание назначения
- Требования к системе и зависимостям
- Инструкции по установке и настройке
- Примеры использования
- Описание структуры проекта
- Информация о лицензии и авторе

# ФОРМАТИРОВАНИЕ
- Используйте Markdown синтаксис
- Структурируйте информацию с помощью заголовков
- Используйте блоки кода для примеров команд
- Добавляйте таблицы для сравнения функций
- Используйте списки для перечислений

# СОДЕРЖАНИЕ
- Описание решаемой проблемы
- Основные возможности и функции
- Архитектура и принципы работы
- API документация (если применимо)
- Примеры конфигурации
- Troubleshooting раздел

# =============================================================================
# ОРГАНИЗАЦИЯ ПРОЕКТА
# =============================================================================

# СТРУКТУРА КАТАЛОГОВ
- tests/ - тестовые данные и скрипты
- config/ - конфигурационные файлы и зависимости
- scripts/ - альтернативные версии и утилиты
- WORK/ - рабочие данные (JSON, INPUT, OUTPUT, SCRIPT, CONFIG)

# РАБОТА С КАТАЛОГАМИ
- Используйте сырые строки (r"path/to/directory") для путей к каталогам
- Создавайте подкаталоги для работы внутри базовых каталогов
- Структурируйте данные по типам и назначению
- Используйте относительные пути для переносимости кода

# ФАЙЛЫ КОНФИГУРАЦИИ
- requirements.txt - зависимости Python
- environment.yml - конфигурация Anaconda
- .gitignore - игнорируемые файлы
- .cursorrules - правила Cursor IDE

# ВИРТУАЛЬНОЕ ОКРУЖЕНИЕ
- Всегда используйте виртуальное окружение для разработки
- Активируйте окружение перед запуском скриптов
- Устанавливайте зависимости только в виртуальном окружении
- Документируйте процесс создания и активации окружения
- Используйте activate_local.sh для активации локального окружения

# =============================================================================
# СПЕЦИФИЧЕСКИЕ ТРЕБОВАНИЯ ПРОЕКТА
# =============================================================================

# ОБРАБОТКА ДАННЫХ
- Поддержка различных форматов входных данных (JSON, CSV, TXT)
- Валидация структуры данных
- Обработка ошибок в данных
- Логирование статистики обработки

# ГЕНЕРАЦИЯ СКРИПТОВ
- Поддержка различных вариантов (SIGMA, ALPHA)
- Шаблонизация скриптов
- Валидация сгенерированных скриптов
- Логирование процесса генерации

# КОНВЕРТАЦИЯ В EXCEL
- Поддержка различных типов данных
- Форматирование ячеек и листов
- Создание сводных таблиц
- Оптимизация для больших файлов

# =============================================================================
# КАЧЕСТВО КОДА
# =============================================================================

# ТЕСТИРОВАНИЕ
- Создавайте тесты для критических функций
- Используйте тестовые данные в каталоге tests/
- Проверяйте граничные случаи
- Тестируйте обработку ошибок

# РЕФАКТОРИНГ
- Разбивайте большие функции на меньшие
- Выносите повторяющийся код в отдельные функции
- Используйте константы вместо магических чисел
- Применяйте принципы SOLID

# БЕЗОПАСНОСТЬ
- Валидируйте все входные данные
- Не храните чувствительную информацию в коде
- Используйте безопасные методы работы с файлами
- Логируйте действия пользователя для аудита 